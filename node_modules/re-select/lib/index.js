'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var isObject = function isObject(a) {
  return typeof a == 'object' && a !== null;
};

var isArray = function isArray(a) {
  return Array.isArray(a);
};

var isFunction = function isFunction(a) {
  return typeof a === 'function';
};

var identity = function identity(a) {
  return a;
};

var defaultEqualityCheck = function defaultEqualityCheck(a, b) {
  return a === b;
};

function areArgumentsEqual(equalityCheck, a, b) {
  if (a === null || b === null || a.length !== b.length) {
    return false;
  }

  for (var i = a.length - 1; i >= 0; --i) {
    if (!equalityCheck(a[i], b[i])) {
      return false;
    }
  }

  return true;
}

var createMemoizor = exports.createMemoizor = function createMemoizor() {
  var equalityCheck = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultEqualityCheck;
  return function (fn) {
    var lastArgs = null;
    var lastResult = null;
    return function () {
      if (!areArgumentsEqual(equalityCheck, lastArgs, arguments)) {
        lastResult = fn.apply(null, arguments);
      }
      lastArgs = arguments;
      return lastResult;
    };
  };
};

function makeDependenciesFn(fns, next) {
  fns = Array.isArray(fns) ? fns : [fns];
  return function () {
    var _arguments = arguments;

    var params = fns.map(function (fn) {
      return fn.apply(null, _arguments);
    });
    return next.apply(null, params);
  };
}

function createNestedSelectors(selectors, next) {
  return selectors.map(function (fn) {
    return isFunction(fn) ? fn : next(fn);
  });
}

function normalizeSelector(selector) {
  if (isArray(selector)) {
    return selector.map(function (nestedSelector) {
      return (isArray(nestedSelector) ? nestedSelector : [nestedSelector]).map(normalizeSelector);
    });
  }

  if (isObject(selector)) {
    var objectKeys = Object.keys(selector);
    return [objectKeys.map(function (key) {
      return normalizeSelector(selector[key]);
    }), [function () {
      for (var _len = arguments.length, values = Array(_len), _key = 0; _key < _len; _key++) {
        values[_key] = arguments[_key];
      }

      return values.reduce(function (composition, value, index) {
        return Object.assign(composition, _defineProperty({}, objectKeys[index], value));
      }, {});
    }]];
  }

  if (isFunction(selector)) {
    return selector;
  }

  throw new Error('Invalid value of type ' + typeof selector + ' for creating a selector');
}

var createSelectorCreator = exports.createSelectorCreator = function createSelectorCreator(memoize) {
  function createSelector(selector) {
    var selectorNormalized = normalizeSelector(isFunction(selector) ? [selector, identity] : selector);

    return selectorNormalized.reduceRight(function (next, cur, index) {
      var dependenciesFn = makeDependenciesFn(createNestedSelectors(cur, createSelector), next);
      return memoize(dependenciesFn);
    }, identity);
  }

  return createSelector;
};

var createSelector = exports.createSelector = createSelectorCreator(createMemoizor());
exports.default = createSelector;